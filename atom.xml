<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keo&#39;s Blog</title>
  <subtitle>温故而知新，每次阅读都会有新的收获</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KeoZmy.github.io/"/>
  <updated>2016-12-10T06:06:00.377Z</updated>
  <id>http://KeoZmy.github.io/</id>
  
  <author>
    <name>KeoZhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://KeoZmy.github.io/2016/12/26/Windows%E7%8E%AF%E5%A2%83%E4%B8%8BSpringBoot+Docker%E6%89%93%E5%8C%85/"/>
    <id>http://KeoZmy.github.io/2016/12/26/Windows环境下SpringBoot+Docker打包/</id>
    <published>2016-12-26T07:38:13.883Z</published>
    <updated>2016-12-10T06:06:00.377Z</updated>
    
    <content type="html"><![CDATA[<p>#Windows环境下Spring Boot+Docker构建应用</p>
<p>##前言<br>最近在研究SpringCloud+Docker构建微服务化的架构，之前没有接触过Docker，在学习的过程中遇到了不少的问题，花了一天的时间学习了Docker，花了一天的时间学习SpringCloud，总算有了一点点的进展。本文将一步步带你构建一个基于 Spring Boot 和 Docker 的单体应用，但愿共同学习共同进步。</p>
<p>###SpringBoot简介<br>Spring Boot 是 Spring 社区发布的一个开源项目，旨在帮助开发者快速简单的构建可独立运行的项目。Spring Boot 会选择最适合的 Spring 子项目和第三方开源库进行整合。大部分 Spring Boot 应用只需要非常少的配置就可以快速运行起来。<br>Spring Boot是SpringCloud的基础，cloud是在boot之上的，所以要完成一个微服务的搭建，你必须先完成SpringBoot+Docker的构建。</p>
<p>官网地址：<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">http://projects.spring.io/spring-boot/</a></p>
<p>###Docker简介<br>Docker 是一套以容器技术为核心的，用于应用的构建、分发和执行的体系和生态。官网地址：</p>
<p>官网地址：<a href="https://docker.com" target="_blank" rel="external">https://docker.com</a><br>ps：我的博客里整理一些docker的学习资料，但是经过一些弯路，还是强烈建议大家去看官网的doc文档，虽然是英文的，但是不难懂，而且很详细。</p>
<p>##环境搭建</p>
<ul>
<li><p>操作系统：64位，系统不限（需支持Docker，我这里是Win10），Windows 上建议安装 Git 客户端，方便支持 Linux 命令行操作</p>
</li>
<li><p>JDK 1.8 + ：推荐一款 Java 环境管理工具 jenv</p>
</li>
<li><p>Maven 3.0 + ：我这里用的是阿里的 Maven 仓库</p>
</li>
<li><p>Docker</p>
<ul>
<li><p>Linux安装教程参考：<a href="https://docs.docker.com/engine/installation/linux/" target="_blank" rel="external">https://docs.docker.com/engine/installation/linux/</a></p>
</li>
<li><p>如果你使用的是Mac或Windows，官方已有原生应用支持，下载地址：<a href="https://docs.docker.com/" target="_blank" rel="external">https://docs.docker.com/</a></p>
</li>
</ul>
</li>
<li><p>一个你喜欢的编译器或IDE，推荐 Atom 或 Intellij IDEA，或者Sublime Text</p>
</li>
</ul>
<p>##步骤</p>
<p>###第一步：新建工程目录<br>因为是Windows系统，走了不少的弯路。Spring官方给出的docker整合示例，是在Linux环境下的。Linux环境是直接可以通过指令build打包的，但是Windows不行，得借助Docker Quickstart Terminal，也就是安装成功后桌面上的：</p>
<p><img src="http://i.imgur.com/QPPFADx.png" alt=""></p>
<p>于是我们打开终端Terminal，输入：mkdir spring-boot-docker</p>
<p><img src="http://i.imgur.com/p4l2uAJ.png" alt=""></p>
<p>创建了我们的项目。接着，在根目录下创建 pom.xml 文件<br>    <code>touch pom.xml</code></p>
<p>在当前目录下新建子目录：</p>
<p><code>mkdir -p src/main/java/com/keozhao/hello</code></p>
<p><img src="http://i.imgur.com/hGoZaGu.png" alt=""></p>
<p>一个典型的 Maven 项目结构如下：</p>
<p><img src="http://i.imgur.com/dqengtk.png" alt=""></p>
<p>###第二步:配置pom.xml文件<br>在 pom.xml 中添加内容如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
  &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;bingohuang.com&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-docker-cloudcomb&lt;/artifactId&gt;
&lt;version&gt;0.1.0&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;
&lt;name&gt;Spring Boot + Docker + Cloudcomb&lt;/name&gt;
&lt;description&gt;一步步带你构建 Spring Boot + Docker 应用及网易蜂巢服务&lt;/description&gt;

&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.3.3.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt;
&lt;/parent&gt;

&lt;properties&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;


&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
    &lt;/project&gt;
</code></pre><p>以上 pom 文件并不复杂，是一个 Spring Boot 的标准配置，Spring Boot 的 Maven 插件会提供以下功能：</p>
<pre><code>1.收集的类路径上所有 jar 文件，并构建成一个单一的、可运行的 jar 文件，这使得它更方便地执行和传输服务。
2.搜索 public static void main() 方法来标记为可运行的类。
3.提供了一个内置的依赖解析器，用于设置版本号以匹配 Spring Boot 的依赖。你可以覆盖任何你想要的版本，但它会默认使用 Spring Boot 所设置的版本集。
</code></pre><p>操作示例：<br><img src="http://i.imgur.com/aqDI0Ly.png" alt=""></p>
<p>通过start指令，调用系统默认打开该文件的程序，你直接将上述代码写入即可</p>
<p>###第三步：编写SpringBoot应用程序</p>
<p>创建一个简单的 Java 应用程序:<br>    <code>touch src/main/java/com/keozhao/hello/Application.java</code></p>
<p>代码如下：</p>
<pre><code>  package com.keozhao.hello;

  import org.springframework.boot.SpringApplication;
  import org.springframework.boot.autoconfigure.SpringBootApplication;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.RestController;

  /**
      * Sprint Boot 主应用入口
      * @author Keo.Zhao
      * @date 2016.12.10
  */
@SpringBootApplication
@RestController
public class Application {

@RequestMapping(&quot;/&quot;)
public String home() {
    return &quot;Hello Spring Boot, Docker and CloudComb!&quot;;
}


public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
}
 } 
</code></pre><p>代码核心就是处理了根路径（/）的 web 请求，并包含可执行的 main 方法，比较好理解，解释一下其中几个关键点：</p>
<ul>
<li><p>用 @SpringBootApplication 和 @RestController 注解类, 表示可用 Spring MVC 来处理 Web 请求</p>
</li>
<li><p>@RequestMapping 将 / 映射到 home() 方法，并返回相应文本</p>
</li>
<li><p>main() 方法使用 Spring Boot 的 SpringApplication.run() 方法来启动应用</p>
</li>
</ul>
<p>操作示例：</p>
<p><img src="http://i.imgur.com/qS98xhE.png" alt=""></p>
<p>我这里默认打开是Sublime Text，于是从Sublime写入</p>
<p><img src="http://i.imgur.com/ABO1JOq.png" alt=""></p>
<p>###第四步：本地运行</p>
<p>####Maven构建<br>该应用的核心代码就已完成，也就两个文件，可见 Spring Boot 非常简单。在项目根目录执行：<code>mvn package</code></p>
<p><img src="http://i.imgur.com/91WNrGj.png" alt=""></p>
<p>之后会在根目录下生成一个 target 目录，并在 target 目录下包含一个可执行的 jar 包。</p>
<p>####运行jar包<br>Spring Boot 的强大之处是将应用打成一个可独立运行的 jar 文件：</p>
<p>   <code>java -jar target/spring-boot-docker-cloudcomb-0.1.0.jar</code></p>
<p>不出意外，输出日志，应用启动，默认会监听 8080 端口。</p>
<p><img src="http://i.imgur.com/c9yaGHH.png" alt=""></p>
<p><img src="http://i.imgur.com/hwYowsx.png" alt=""></p>
<p>####访问应用</p>
<p>应用正常启动后，浏览器访问 <a href="http://127.0.0.1:8080/，即可看到页面输出字样：" target="_blank" rel="external">http://127.0.0.1:8080/，即可看到页面输出字样：</a></p>
<p><img src="http://i.imgur.com/nLtEYva.png" alt=""></p>
<p>###第五步：容器化构建及运行</p>
<p>####书写DockerFile<br>在项目根目录下创建一个 Dockerfile 文件，<code>touch Dockerfile</code><br>内容如下：</p>
<pre><code>FROM frolvlad/alpine-oraclejdk8:slim

COPY target/spring-boot-docker-cloudcomb-0.1.0.jar app.jar

ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]
</code></pre><p>此 Dockerfile 并不复杂，核心功能就是将可执行文件拷贝到镜像中，并在容器启动时默认执行启动命令 java -jar /app.jar<br>一样也是也通过start的指令打开，再写入、保存。</p>
<p>####docker 构建</p>
<p>在项目根目录下执行 docker 构建镜像命令：<br>    <code>docker build -t spring-boot-docker-cloudcomb:0.1.0 .</code><br>（别忘记后面的点）</p>
<p><a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="external">docker build 指令详情</a></p>
<p><img src="http://i.imgur.com/N7VoP8V.png" alt=""></p>
<p>这一步完成，你已经成功构建了镜像，输入<code>docker images</code>可以看见<br><img src="http://i.imgur.com/exCPbnD.png" alt=""></p>
<p>####docker运行<br>运行 docker 容器：<br>    <code>docker run -p 8080:8080 -t spring-boot-docker-cloudcomb:0.1.0</code></p>
<p>####访问项目<br>同样，会输出日志（略有不同），监听 8080 端口，浏览器访问 <a href="http://127.0.0.1:8080/（或者localhost:8080），输出文本。" target="_blank" rel="external">http://127.0.0.1:8080/（或者localhost:8080），输出文本。</a></p>
<p>Hello Spring Boot, Docker and CloudComb!</p>
<p>到这里，你已经成功完成了Windows环境下SpringBoot + Docker构建应用！！</p>
<p>###一点小发现：</p>
<p>如果你觉得在终端窗口一步步创建文件比较麻烦，或许我们可以直接把工程copy到Terminal的运行环境中。其实在上文，start打开应用时，我们可以发现文件创建在了<code>C:\Users\Keo.Zhao</code>这个路径下，Keo.Zhao是我的用户名，不同的电脑这里必然会有差异，不妨打开你的电脑看看这个路径。因为docker才学习了一天，其实一些细节、机制还不了解。但是我猜测，Terminal本质还是为Windows用户提供了一个虚拟的Linux环境，在Linux的环境里是没有盘符这个概念的，所以默认当前系统用户的目录为运行的目录（应该可以更改，后期再研究，有不对的地方希望大牛能指出，多谢！）。所以，可以直接把你在ide里写好的项目，copy到<code>C:\Users\Keo.Zhao</code>目录下，你的也许会叫做<code>C:\Users\administrator</code>，打开Terminal，输入<code>dir</code>，一定会有新的发现~</p>
<p>本文参考链接：</p>
<p><a href="https://github.com/163yun/spring-boot-docker-cloudcomb" target="_blank" rel="external">https://github.com/163yun/spring-boot-docker-cloudcomb</a></p>
<p><a href="https://docs.docker.com/" target="_blank" rel="external">https://docs.docker.com/</a></p>
<p><a href="https://spring.io/guides/gs/spring-boot-docker/#initial" target="_blank" rel="external">https://spring.io/guides/gs/spring-boot-docker/#initial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Windows环境下Spring Boot+Docker构建应用&lt;/p&gt;
&lt;p&gt;##前言&lt;br&gt;最近在研究SpringCloud+Docker构建微服务化的架构，之前没有接触过Docker，在学习的过程中遇到了不少的问题，花了一天的时间学习了Docker，花了一天的时间学
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://KeoZmy.github.io/2016/12/26/SpringCloud%E6%95%B4%E5%90%88php%E3%80%81python%E7%A4%BA%E4%BE%8B/"/>
    <id>http://KeoZmy.github.io/2016/12/26/SpringCloud整合php、python示例/</id>
    <published>2016-12-26T07:38:13.863Z</published>
    <updated>2016-12-19T08:30:51.771Z</updated>
    
    <content type="html"><![CDATA[<p>#SpringCloud整合php、python示例</p>
<p>代码已上传至： <a href="https://github.com/KeoZmy/SpringCloudDemo.git" target="_blank" rel="external">https://github.com/KeoZmy/SpringCloudDemo.git</a> ，博客中没有写到网关 zuul，但是git中已上传</p>
<p>##前言</p>
<p>最近一直在花时间研究微服务，各种开源组件组合一个framework到最后决定用springcloud这样成熟的framework。不得不说，springcloud确实很强大，还有Pivotal和Netfix是其强大的后盾与技术输出。最后还是选用了springcloud的netfix作为核心的开发。</p>
<p>springcloud中的sidecar是出于netfix中prana的启发，正如官方reference所说：</p>
<p>Do you have non-jvm languages you want to take advantage of Eureka, Ribbon and Config Server? The Spring Cloud Netflix Sidecar was inspired by Netflix Prana. It includes a simple http api to get all of the instances (ie host and port) for a given service. You can also proxy service calls through an embedded Zuul proxy which gets its route entries from Eureka. The Spring Cloud Config Server can be accessed directly via host lookup or through the Zuul Proxy. The non-jvm app should implement a health check so the Sidecar can report to eureka if the app is up or down</p>
<p>你是否有非jvm语言应用程序需要使用Eureka, Ribbon和Config Server的功能? Spring Cloud Netflix Sidecar 受 Netflix Prana 启发. 它包含一个简单的HTTP API去获取所有注册的实例信息(包括host和port信息). 你也可以通过依赖Eureka的嵌入式Zuul代理器代理服务调用. The Spring Cloud Config Server可以通过host查找 或Zuul代理直接进入. 非JVM应用程序提供健康检查实现即可让Sidecar向eureka同步应用程序up还是down.</p>
<p>简单的说，一个非jvm程序，如：php、python等，想要注册到eureka，但是应用都是一堆别的语言写的，那我应该如何实现呢？Sidecar的原理就是侦听该应用所运行的端口，然后检测该程序的运行状态，官方的描述会更形象一些：</p>
<p><img src="http://i.imgur.com/ilU73lu.png" alt=""></p>
<p>##实现</p>
<p>本文主要是参考官方给出结合python的例子，示例了一个springcloud结合php、python的例子。</p>
<p>###php准备</p>
<p>先准备一下php的环境，详见：</p>
<p><a href="http://jingyan.baidu.com/article/cd4c2979f4797e756e6e6086.html" target="_blank" rel="external">使用WAMP快速搭建PHP Web开发环境</a></p>
<p>(ps:我没有做过php的相关开发，只是最近参与公司项目的重构，里面以java代码为主但是也有python、php的模块，自己快速搭建了一个php的demo做测试，如果你是专业的php developer你当然可以选择你自己的方式)</p>
<p>我的wamp服务器www目录：</p>
<p><img src="http://i.imgur.com/q7K3c0r.png" alt=""></p>
<p>health.json就是非JVM应用程序提供模仿SpringBoot健康检查接口的可访问的uri. 它应该返回一个json文档类似如下:</p>
<pre><code>`{&quot;status&quot;:&quot;UP&quot;}`
</code></pre><p>by the way，我把服务器的端口改成了3000，默认的是80</p>
<p><a href="http://jingyan.baidu.com/article/e3c78d644100e83c4c85f5d7.html" target="_blank" rel="external">如何修改wamp默认80端口</a></p>
<p>###python准备（python大神请随意）</p>
<p>这边主要是写了一个python程序模拟web应用的运行，这个应用占用的端口为5680</p>
<pre><code>import httplib

from twisted.web import server, resource
from twisted.internet import reactor, endpoints

class Health(resource.Resource):
    isLeaf = True

    def render_GET(self, request):
        request.setHeader(&quot;content-type&quot;, &quot;application/json&quot;)
        return &apos;{&quot;status&quot;:&quot;UP&quot;}\n&apos;

class Fortune(resource.Resource):
    isLeaf = True

def render_GET(self, request):
    conn = httplib.HTTPConnection(&apos;localhost&apos;, 5678)
    conn.request(&quot;GET&quot;, &quot;/fortunes&quot;)
    res = conn.getresponse()
    fortune = res.read()
    request.setHeader(&quot;content-type&quot;, &quot;text/plain&quot;)
    return fortune


root = resource.Resource()
root.putChild(&apos;health&apos;, Health())    
root.putChild(&apos;&apos;, Fortune())
endpoints.serverFromString(reactor, &quot;tcp:5680&quot;).listen(server.Site(root))
reactor.run()
</code></pre><p>###Eureka</p>
<p>创建一个springboot程序，修改pom文件如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;org.test&lt;/groupId&gt;
&lt;artifactId&gt;eureka&lt;/artifactId&gt;
&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;

&lt;name&gt;eureka&lt;/name&gt;
&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.2.5.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;
            &lt;version&gt;Angel.SR3&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 &lt;/project&gt;
</code></pre><p>修改application.properties配置文件</p>
<pre><code>server.port=8761
eureka.client.fetch-registry=false
eureka.client.register-with-eureka=false
</code></pre><p>最后，我们在EurekaApplication中添加注解<code>@EnableEurekaServer</code>，开启服务的注册中心</p>
<p><img src="http://i.imgur.com/h3H7XIB.png" alt=""></p>
<p>项目目录结构如下：</p>
<p><img src="http://i.imgur.com/tWIMLjS.png" alt=""></p>
<p>###Configserver</p>
<p>创建一个springboot程序，修改pom文件如下：</p>
<pre><code> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;org.test&lt;/groupId&gt;
&lt;artifactId&gt;configserver&lt;/artifactId&gt;
&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;

&lt;name&gt;configserver&lt;/name&gt;
&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.2.5.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
                &lt;artifactId&gt;spring-security-rsa&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;
            &lt;version&gt;Angel.SR3&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
 &lt;/project&gt;
</code></pre><p>修改application.properties配置文件:</p>
<pre><code>server.port=8888
spring.cloud.config.server.git.uri=https://github.com/spencergibb/oscon-config-repo
</code></pre><p>这里还有一个配置文件bootstrap.properties：</p>
<pre><code>server.port=5678
sidecar.port=3000
sidecar.health-uri=http://localhost:${sidecar.port}/phpTest/health.json
</code></pre><p>项目目录如下：</p>
<p><img src="http://i.imgur.com/Hblz6iN.png" alt=""></p>
<p>###sidecar for php</p>
<p>开始编写一个为php应用对接的sidecar程序</p>
<p>同样，这是一个springboot程序，我们先改写pom.xml文件</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
     xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;org.test&lt;/groupId&gt;
&lt;artifactId&gt;sidecar&lt;/artifactId&gt;
&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;

&lt;name&gt;sidecar&lt;/name&gt;
&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;

&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.2.5.RELEASE&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
&lt;/parent&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
&lt;/properties&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-netflix-sidecar&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;
        &lt;version&gt;RELEASE&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-parent&lt;/artifactId&gt;
            &lt;version&gt;Angel.SR3&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
&lt;/project&gt;
</code></pre><p>然后在程序中开启@EnableSidecar</p>
<p><img src="http://i.imgur.com/ovJJGFH.png" alt=""></p>
<p>最后，关键性的一步，我们改写application.properties文件</p>
<pre><code>server.port=5678    
sidecar.port=3000
sidecar.health-uri=http://localhost:${sidecar.port}/phpTest/health.json
</code></pre><p> <code>server.port=5678</code> 指定了这个sidecar运行时所占用的端口</p>
<p> <code>sidecar.port=3000</code> 指定了sidecar监听非jvm应用程序的端口，就是我们的php程序所挂载的服务器，之前我已经把服务器端口改成3000了</p>
<p> <code>sidecar.health-uri=http://localhost:${sidecar.port}/phpTest/health.json</code>指定了php程序返回给sidecar的健康指标状态，我这里是通过文件的返回，当然你也可以通过RESTAPI，如果程序没有正常挂起，sidecar自然不能进行健康监测访问health.json（或者health方法），拿不到<code>up</code>，所以在注册中心则会显示一个<code>douwn</code>的状态，表示程序没有正常挂起，这就是sidecar的思想。</p>
<p>项目结构：</p>
<p><img src="http://i.imgur.com/Yjjg950.png" alt=""></p>
<p>###sidecar for python</p>
<p>创建一个为python对接的sidecar，步骤和上面创建为php的如出一辙，只是配置文件有些许的不同</p>
<pre><code>server.port=5688
sidecar.port=5680
sidecar.health-uri=http://localhost:${sidecar.port}/health
</code></pre><p>开头我们所准备的python应用占用的就是5680端口，这里拿到健康状态的监测是通过RESTAPI</p>
<p>###运行程序</p>
<p>只要php服务和python服务的开启在两个sidecar开启之前就好</p>
<p>JAVA程序的启动顺序为（从左到右）：</p>
<p><img src="http://i.imgur.com/DvXPVAp.png" alt=""></p>
<p>我们访问<code>http://localhost:8761/</code>可以看到：</p>
<p><img src="http://i.imgur.com/zOdmLvY.png" alt=""></p>
<p>两个非jvm语言的程序应用已经成功注册到eureka，并且是up的状态</p>
<p>我们关闭其中的一个python服务，可以看到：</p>
<p><img src="http://i.imgur.com/iGPSWqQ.png" alt=""></p>
<p>php和python服务已经如同springboot程序一样，关闭即down，可以在注册中心看到它的运行状态了！</p>
<p>##总结</p>
<p>SideCar的设计很优雅，它完全不会去入侵其他应用的代码。就像一个代理一样，它始终观察着应用的运行（它的健康状态），本质上注册到eureka的是sidecar，但是它所显示的状态却是它所监测的应用。只要php、python..等为其提供一个health监测的接口即可！</p>
<p>代码已上传至： <a href="https://github.com/KeoZmy/SpringCloudDemo.git" target="_blank" rel="external">https://github.com/KeoZmy/SpringCloudDemo.git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#SpringCloud整合php、python示例&lt;/p&gt;
&lt;p&gt;代码已上传至： &lt;a href=&quot;https://github.com/KeoZmy/SpringCloudDemo.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://
    
    </summary>
    
    
  </entry>
  
</feed>
